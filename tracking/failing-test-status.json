{
  "files": {
    "tests/integration/cli/cli-commands.test.ts": {
      "suites": {
        "Scaffold CLI Integration Tests > scaffold check": {
          "should check current directory": "failed",
          "should report when not a scaffold project": "failed"
        },
        "Scaffold CLI Integration Tests > scaffold completion": {
          "should check completion status": "failed"
        },
        "Scaffold CLI Integration Tests > Error handling": {
          "should handle missing required arguments gracefully": "failed"
        }
      }
    },
    "tests/integration/cli/completion/complete.test.ts": {
      "suites": {
        "scaffold completion complete (integration) > command completion": {
          "should complete top-level commands": "failed",
          "should complete subcommands for template": "failed",
          "should complete subcommands for completion": "failed"
        },
        "scaffold completion complete (integration) > option completion": {
          "should complete global options": "failed",
          "should complete command-specific options": "failed",
          "should complete completion command options": "failed"
        },
        "scaffold completion complete (integration) > option value completion": {
          "should complete shell types for --shell option": "failed",
          "should filter completions based on partial input": "failed"
        },
        "scaffold completion complete (integration) > edge cases": {
          "should handle completion at different cursor positions": "failed",
          "should work with different working directories": "failed"
        },
        "scaffold completion complete (integration) > performance": {
          "should complete within reasonable time": "failed"
        },
        "scaffold completion complete (integration) > output format": {
          "should output valid JSON for each completion": "failed"
        }
      }
    },
    "tests/integration/cli/completion/install.test.ts": {
      "suites": {
        "scaffold completion install (integration) > successful installation": {
          "should install completion for bash with auto-detection": "failed",
          "should install completion for zsh with explicit shell option": "failed",
          "should install completion for fish": "failed",
          "should show verbose output when --verbose flag is used": "failed",
          "should reinstall when --force flag is used": "failed"
        },
        "scaffold completion install (integration) > error scenarios": {
          "should warn when already installed without force": "failed"
        },
        "scaffold completion install (integration) > edge cases": {
          "should create necessary directories if they do not exist": "failed",
          "should handle existing shell config files": "failed"
        },
        "scaffold completion install (integration) > output format validation": {
          "should output in expected format for successful installation": "failed"
        }
      }
    },
    "tests/integration/cli/completion/script.test.ts": {
      "suites": {
        "scaffold completion script (integration) > script generation for different shells": {
          "should generate bash completion script": "failed",
          "should generate zsh completion script": "failed",
          "should generate fish completion script": "failed",
          "should generate script for explicitly specified shell": "failed"
        },
        "scaffold completion script (integration) > script output with instructions": {
          "should include installation instructions when --instructions flag is used": "failed",
          "should show brief instructions in verbose mode without --instructions": "failed",
          "should not show duplicate instructions when both --instructions and --verbose are used": "failed"
        },
        "scaffold completion script (integration) > error scenarios": {
          "should handle shell detection failure gracefully": "failed"
        },
        "scaffold completion script (integration) > script content validation": {
          "should generate syntactically valid bash script": "failed",
          "should include necessary completion functions for each shell": "failed",
          "should call scaffold CLI for dynamic completions": "failed"
        },
        "scaffold completion script (integration) > output format validation": {
          "should output script without extra formatting when no flags are used": "failed",
          "should be suitable for shell redirection": "failed"
        },
        "scaffold completion script (integration) > edge cases": {
          "should handle missing HOME environment variable": "failed",
          "should work when scaffold is not installed in completion": "failed",
          "should handle different shell environment variables": "failed"
        }
      }
    },
    "tests/integration/cli/completion/status.test.ts": {
      "suites": {
        "scaffold completion status (integration) > status with completion installed": {
          "should report installed and enabled status for bash": "failed",
          "should report status for zsh with version information": "failed",
          "should report status for fish": "failed"
        },
        "scaffold completion status (integration) > status with completion not installed": {
          "should report not installed status": "failed",
          "should suggest shell-specific installation command": "failed"
        },
        "scaffold completion status (integration) > status with verbose output": {
          "should show detailed information when --verbose flag is used": "failed",
          "should show file information when completion script exists": "failed",
          "should handle missing script file gracefully in verbose mode": "failed"
        },
        "scaffold completion status (integration) > JSON output format": {
          "should output valid JSON when --format json is used": "failed",
          "should output valid JSON for not installed status": "failed"
        },
        "scaffold completion status (integration) > error scenarios": {
          "should handle corrupted configuration gracefully": "failed",
          "should handle invalid format option": "failed"
        },
        "scaffold completion status (integration) > edge cases": {
          "should detect shell correctly from environment": "failed",
          "should show up-to-date status when version matches": "failed"
        },
        "scaffold completion status (integration) > output format validation": {
          "should have consistent table formatting": "failed",
          "should show appropriate next steps based on status": "failed"
        }
      }
    },
    "tests/integration/cli/completion/uninstall.test.ts": {
      "suites": {
        "scaffold completion uninstall (integration) > successful uninstallation": {
          "should uninstall completion for bash": "failed",
          "should uninstall completion for zsh": "failed",
          "should uninstall completion for fish": "failed",
          "should show verbose output when --verbose flag is used": "failed"
        },
        "scaffold completion uninstall (integration) > error scenarios": {
          "should handle when completion is not installed": "failed",
          "should handle permission errors gracefully": "failed"
        },
        "scaffold completion uninstall (integration) > edge cases": {
          "should clean up shell config even if completion file is missing": "failed",
          "should preserve other content in shell config files": "failed"
        },
        "scaffold completion uninstall (integration) > output format validation": {
          "should output in expected format for successful uninstallation": "failed",
          "should provide shell-specific cleanup instructions": "failed"
        }
      }
    },
    "tests/integration/commands/extend.test.ts": {
      "suites": {
        "scaffold extend command integration tests > help and usage": {
          "should display help for extend command": "failed"
        },
        "scaffold extend command integration tests > template requirement": {
          "should fail when template is not specified": "failed",
          "should fail when template is not specified for current directory": "failed"
        },
        "scaffold extend command integration tests > project validation": {
          "should fail when project is not scaffold-managed": "failed"
        },
        "scaffold extend command integration tests > successful extend scenarios": {
          "should extend project with specified template": "failed",
          "should extend current directory when no project path provided": "failed",
          "should handle relative project paths": "failed",
          "should handle absolute project paths": "failed"
        },
        "scaffold extend command integration tests > dry run mode": {
          "should show what would be extended without making changes": "failed",
          "should show variables in dry run": "failed"
        },
        "scaffold extend command integration tests > verbose mode": {
          "should show detailed output in verbose mode": "failed",
          "should show options in verbose mode": "failed"
        },
        "scaffold extend command integration tests > variables handling": {
          "should accept valid JSON variables": "failed",
          "should handle empty variables object": "failed",
          "should fail with invalid JSON variables": "failed",
          "should handle complex nested variables": "failed"
        },
        "scaffold extend command integration tests > force mode": {
          "should handle force option without confirmation prompts": "failed",
          "should handle force with dry run": "failed"
        },
        "scaffold extend command integration tests > template name validation": {
          "should handle templates with spaces in names": "failed",
          "should handle templates with special characters": "failed",
          "should handle very long template names": "failed"
        },
        "scaffold extend command integration tests > option combinations": {
          "should handle multiple options together": "failed",
          "should handle conflicting options gracefully": "failed"
        },
        "scaffold extend command integration tests > exit codes": {
          "should exit with code 0 for successful operations": "failed",
          "should exit with code 0 for successful dry runs": "failed"
        },
        "scaffold extend command integration tests > output format validation": {
          "should produce consistent output format": "failed",
          "should not leak sensitive information in output": "failed"
        },
        "scaffold extend command integration tests > error scenarios": {
          "should handle special characters in project paths": "failed"
        },
        "scaffold extend command integration tests > service integration": {
          "should integrate with project service": "failed"
        },
        "scaffold extend command integration tests > edge cases": {
          "should handle empty project directory with manifest": "failed",
          "should handle projects with existing templates": "failed",
          "should handle template names that match existing templates": "failed"
        }
      }
    },
    "tests/integration/commands/fix.test.ts": {
      "suites": {
        "scaffold fix command integration tests > non-scaffold projects": {
          "should handle non-scaffold-managed projects gracefully": "failed",
          "should handle current directory when not scaffold-managed": "failed"
        },
        "scaffold fix command integration tests > scaffold-managed projects": {
          "should process valid scaffold projects": "failed",
          "should process current directory when it is a scaffold project": "failed",
          "should show project structure is valid for healthy projects": "failed"
        },
        "scaffold fix command integration tests > verbose mode": {
          "should show detailed output in verbose mode": "failed",
          "should show options in verbose mode": "failed"
        },
        "scaffold fix command integration tests > dry run mode": {
          "should show what would be fixed without making changes": "failed"
        },
        "scaffold fix command integration tests > backup handling": {
          "should handle backup option": "failed",
          "should handle no-backup option": "failed"
        },
        "scaffold fix command integration tests > force mode": {
          "should handle force option": "failed"
        },
        "scaffold fix command integration tests > path handling": {
          "should handle absolute paths": "failed",
          "should handle relative paths": "failed"
        },
        "scaffold fix command integration tests > malformed manifest handling": {
          "should handle missing manifest files": "failed"
        },
        "scaffold fix command integration tests > exit codes": {
          "should exit with code 0 for valid projects": "failed",
          "should exit with code 0 for non-scaffold projects": "failed"
        },
        "scaffold fix command integration tests > output format validation": {
          "should produce consistent report format": "failed",
          "should not leak sensitive information": "failed"
        },
        "scaffold fix command integration tests > option combinations": {
          "should handle multiple options together": "failed",
          "should handle conflicting backup options": "failed"
        },
        "scaffold fix command integration tests > error scenarios": {
          "should handle special characters in paths": "failed"
        },
        "scaffold fix command integration tests > service integration": {
          "should integrate with project service": "failed"
        }
      }
    },
    "tests/integration/commands/new.test.ts": {
      "suites": {
        "scaffold new command integration tests > dry run mode": {
          "should show dry run output without creating files": "failed",
          "should show dry run with verbose output": "failed"
        },
        "scaffold new command integration tests > template handling": {
          "should show message when no templates available": "failed"
        },
        "scaffold new command integration tests > variable handling": {
          "should handle valid JSON variables": "failed",
          "should handle invalid JSON variables": "failed"
        },
        "scaffold new command integration tests > path handling": {
          "should handle custom path option": "failed",
          "should handle relative paths": "failed"
        },
        "scaffold new command integration tests > directory existence": {
          "should handle existing directory gracefully": "failed"
        },
        "scaffold new command integration tests > verbose mode": {
          "should show detailed output in verbose mode": "failed"
        },
        "scaffold new command integration tests > error scenarios": {
          "should handle permission errors gracefully": "failed"
        },
        "scaffold new command integration tests > exit codes": {
          "should exit with code 0 for successful dry runs": "failed"
        },
        "scaffold new command integration tests > output format validation": {
          "should produce consistent output format": "failed",
          "should not leak sensitive information in output": "failed"
        }
      }
    },
    "tests/integration/commands/template-alias.test.ts": {
      "suites": {
        "scaffold template alias command (integration) > successful alias operations": {
          "should create an alias for a template using full SHA": "failed",
          "should create an alias using short SHA": "failed",
          "should create multiple aliases for same template": "failed",
          "should update an existing alias to point to same template (idempotent)": "failed",
          "should use alias to create a new project": "failed"
        },
        "scaffold template alias command (integration) > error scenarios": {
          "should error when creating alias for non-existent template": "failed",
          "should error when alias already exists for different template": "failed",
          "should error with invalid alias format": "failed",
          "should error with ambiguous short SHA": "failed",
          "should error when no arguments provided": "failed"
        },
        "scaffold template alias command (integration) > template list with aliases": {
          "should display aliases in template list": "failed",
          "should show multiple aliases for same template": "failed"
        },
        "scaffold template alias command (integration) > using aliases in other commands": {
          "should delete template using alias": "failed",
          "should export template using alias": "failed"
        }
      }
    },
    "tests/integration/commands/template.test.ts": {
      "suites": {
        "scaffold template command integration tests > list action": {
          "should list available templates": "failed",
          "should show verbose template information": "failed",
          "should handle no templates available": "failed"
        },
        "scaffold template command integration tests > create action": {
          "should require template name for create": "failed",
          "should handle dry run for create": "failed"
        },
        "scaffold template command integration tests > delete action": {
          "should require template identifier for delete": "failed",
          "should handle dry run for delete": "failed",
          "should handle force delete": "failed"
        },
        "scaffold template command integration tests > export action": {
          "should require template identifier for export": "failed",
          "should handle export to default path": "failed",
          "should handle export to custom path": "failed",
          "should handle dry run for export": "failed"
        },
        "scaffold template command integration tests > import action": {
          "should require archive path for import": "failed",
          "should handle dry run for import": "failed",
          "should handle import with valid archive": "failed"
        },
        "scaffold template command integration tests > alias action": {
          "should require template identifier for alias": "failed",
          "should require new alias for alias action": "failed"
        },
        "scaffold template command integration tests > unknown action": {
          "should handle unknown actions": "failed"
        },
        "scaffold template command integration tests > verbose mode": {
          "should show verbose output for all actions": "failed"
        },
        "scaffold template command integration tests > option combinations": {
          "should handle multiple options together": "failed",
          "should handle force and dry-run together": "failed"
        },
        "scaffold template command integration tests > exit codes": {
          "should exit with code 0 for successful operations": "failed"
        },
        "scaffold template command integration tests > output format validation": {
          "should produce consistent list output format": "failed",
          "should not leak sensitive information in output": "failed"
        },
        "scaffold template command integration tests > template name validation": {
          "should handle templates with spaces in names": "failed",
          "should handle templates with special characters": "failed",
          "should handle very long template names": "failed"
        },
        "scaffold template command integration tests > service integration": {
          "should integrate with template service": "failed"
        },
        "scaffold template command integration tests > file system operations": {
          "should handle missing template directories": "failed"
        }
      }
    },
    "tests/unit/services/project-manifest.service.test.ts": {
      "suites": {
        "ProjectManifestService > updateProjectManifest": {
          "should handle file service errors": "failed"
        }
      }
    },
    "tests/unit/services/variable-substitution-service.test.ts": {
      "suites": {
        "VariableSubstitutionService > substituteVariables": {
          "should handle nested variables": "failed",
          "should detect self-referencing variables": "failed",
          "should handle default values": "failed",
          "should use variable value over default when present": "failed",
          "should handle indirect circular reference through multiple paths": "failed"
        }
      }
    }
  }
}